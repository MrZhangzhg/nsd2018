1、安装
# pip install ansible
2、创建项目
(djenv) [root@room8pc16 ansible_project]# django-admin startproject myansible
3、网址规划
http://ip/     # 主页：主机信息、添加主机（组）、添加模块、执行任务
http://ip/webansi/   # 主机信息
http://ip/webansi/addhosts/   # 添加主机（组）
http://ip/webansi/addmodules/   # 添加模块
http://ip/webansi/tasks/   # 执行任务

4、创建应用
(djenv) [root@room8pc16 myansible]# python manage.py startapp webansi

5、修改项目的配置
# settings.py
ALLOWED_HOSTS = '*'
INSTALLED_APPS = [
    ... ...
    'webansi',
]
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False

6、配置URL
# myansible/urls.py
from django.conf.urls import url, include
from django.contrib import admin
from webansi import views

urlpatterns = [
    url(r'^$', views.index, name='index'),
    url(r'^admin/', admin.site.urls),
    url(r'^webansi/', include('webansi.urls')),
]

# webansi/urls.py
from django.conf.urls import url

urlpatterns = [
]
7、创建index函数
# webansi/views.py
from django.shortcuts import render

def index(request):
    return render(request, 'index.html')

8、创建模板
(djenv) [root@room8pc16 myansible]# mkdir webansi/templates
# webansi/templates/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>首页</title>
</head>
<body>
这是首页
</body>
</html>

10、引入bootstrap
拷贝day18项目中的static到webansi目录
# index.html
{% load staticfiles %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>首页</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
    <style>
        .banner{
            background-image: url("{% static 'imgs/banner.jpg' %}");
            background-size: 100%;
            height: 200px;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="banner"></div>
    <div class="main"></div>
    <div class="footer text-center h4">
        <a href="http://linux.tedu.cn" target="_blank">达内云计算学院</a> 客服电话：400-111-8989 邮箱：admin@tedu.cn
    </div>
</div>
<script src="{% static 'js/jquery.min.js' %}"></script>
<script src="{% static 'js/bootstrap.min.js' %}"></script>
</body>
</html>
11、将index.html复制，形成基础模板base.html
12、将base.html中需要每个页面自定义的内容通过block定义
{% load staticfiles %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
    <style>
        .banner{
            background-image: url("{% static 'imgs/banner.jpg' %}");
            background-size: 100%;
            height: 200px;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="banner"></div>
    <div class="main">{% block content %}{% endblock %}</div>
    <div class="footer text-center h4">
        <a href="http://linux.tedu.cn" target="_blank">达内云计算学院</a> 客服电话：400-111-8989 邮箱：admin@tedu.cn
    </div>
</div>
<script src="{% static 'js/jquery.min.js' %}"></script>
<script src="{% static 'js/bootstrap.min.js' %}"></script>
</body>
</html>
13、修改index.html，继承base.html
{% extends 'base.html' %}
{% load staticfiles %}
{% block title %}首页{% endblock %}
{% block content %}
    <div class="row">
        <div class="col-md-3 text-center h4">
            <a href="#">
                <img src="{% static 'imgs/linux.jpg' %}" width="150px"><br>主机信息
            </a>
        </div>
        <div class="col-md-3 text-center h4">
            <a href="#">
                <img src="{% static 'imgs/linux.jpg' %}" width="150px"><br>添加主机
            </a>
        </div>
        <div class="col-md-3 text-center h4">
            <a href="#">
                <img src="{% static 'imgs/linux.jpg' %}" width="150px"><br>添加模块
            </a>
        </div>
        <div class="col-md-3 text-center h4">
            <a href="#">
                <img src="{% static 'imgs/linux.jpg' %}" width="150px"><br>执行任务
            </a>
        </div>
    </div>
{% endblock %}

14、设计模型
# webansi/models.py
from django.db import models

class HostGroup(models.Model):
    hostgroup = models.CharField(max_length=20, unique=True)

    def __str__(self):
        return self.hostgroup

class Host(models.Model):
    hostname = models.CharField(max_length=50, unique=True)
    ipaddr = models.CharField(max_length=15, unique=True)
    group = models.ForeignKey(HostGroup, on_delete=models.CASCADE)

    def __str__(self):
        return "<%s -> %s>" % (self.hostname, self.group)

class AnsiModule(models.Model):
    mod_name = models.CharField(max_length=30)

    def __str__(self):
        return self.mod_name

class ModArgs(models.Model):
    args_text = models.CharField(max_length=100)
    mod = models.ForeignKey(AnsiModule, on_delete=models.CASCADE)

    def __str__(self):
        return "<%s -> %s>" % (self.args_text, self.mod)
15、生成数据库表
(djenv) [root@room8pc16 myansible]# python manage.py makemigrations
(djenv) [root@room8pc16 myansible]# python manage.py migrate
(djenv) [root@room8pc16 myansible]# python manage.py createsuperuser

16、查看数据库
一个sqlite文件就是一个数据库
(djenv) [root@room8pc16 myansible]# sqlite3 db.sqlite3
sqlite> .help
sqlite> .tables
sqlite> .schema webansi_hostgroup
sqlite> select * from webansi_host;

17、将模型注册到后台管理界面
# vim webansi/admin.py
from django.contrib import admin
from .models import HostGroup, Host, AnsiModule, ModArgs

for item in [HostGroup, Host, AnsiModule, ModArgs]:
    admin.site.register(item)

18、定制后台管理界面
from django.contrib import admin
from .models import HostGroup, Host, AnsiModule, ModArgs

class HostAdmin(admin.ModelAdmin):
    list_display = ('hostname', 'ipaddr', 'group')
    search_fields = ('hostname', 'ipaddr')
    # 用在有外键的项目上，创建主机时，可以显示组的详细信息
    raw_id_fields = ('group',)

class HostGroupAdmin(admin.ModelAdmin):
    search_fields = ('hostgroup', )

admin.site.register(Host, HostAdmin)
admin.site.register(HostGroup, HostGroupAdmin)

for item in [AnsiModule, ModArgs]:
    admin.site.register(item)















