1、安装
# pip install ansible
2、创建项目
(djenv) [root@room8pc16 ansible_project]# django-admin startproject myansible
3、网址规划
http://ip/     # 主页：主机信息、添加主机（组）、添加模块、执行任务
http://ip/webansi/   # 主机信息
http://ip/webansi/addhosts/   # 添加主机（组）
http://ip/webansi/addmodules/   # 添加模块
http://ip/webansi/tasks/   # 执行任务

4、创建应用
(djenv) [root@room8pc16 myansible]# python manage.py startapp webansi

5、修改项目的配置
# settings.py
ALLOWED_HOSTS = '*'
INSTALLED_APPS = [
    ... ...
    'webansi',
]
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False

6、配置URL
# myansible/urls.py
from django.conf.urls import url, include
from django.contrib import admin
from webansi import views

urlpatterns = [
    url(r'^$', views.index, name='index'),
    url(r'^admin/', admin.site.urls),
    url(r'^webansi/', include('webansi.urls')),
]

# webansi/urls.py
from django.conf.urls import url

urlpatterns = [
]
7、创建index函数
# webansi/views.py
from django.shortcuts import render

def index(request):
    return render(request, 'index.html')

8、创建模板
(djenv) [root@room8pc16 myansible]# mkdir webansi/templates
# webansi/templates/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>首页</title>
</head>
<body>
这是首页
</body>
</html>

10、引入bootstrap
拷贝day18项目中的static到webansi目录
# index.html
{% load staticfiles %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>首页</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
    <style>
        .banner{
            background-image: url("{% static 'imgs/banner.jpg' %}");
            background-size: 100%;
            height: 200px;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="banner"></div>
    <div class="main"></div>
    <div class="footer text-center h4">
        <a href="http://linux.tedu.cn" target="_blank">达内云计算学院</a> 客服电话：400-111-8989 邮箱：admin@tedu.cn
    </div>
</div>
<script src="{% static 'js/jquery.min.js' %}"></script>
<script src="{% static 'js/bootstrap.min.js' %}"></script>
</body>
</html>
11、将index.html复制，形成基础模板base.html
12、将base.html中需要每个页面自定义的内容通过block定义
{% load staticfiles %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
    <style>
        .banner{
            background-image: url("{% static 'imgs/banner.jpg' %}");
            background-size: 100%;
            height: 200px;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="banner"></div>
    <div class="main">{% block content %}{% endblock %}</div>
    <div class="footer text-center h4">
        <a href="http://linux.tedu.cn" target="_blank">达内云计算学院</a> 客服电话：400-111-8989 邮箱：admin@tedu.cn
    </div>
</div>
<script src="{% static 'js/jquery.min.js' %}"></script>
<script src="{% static 'js/bootstrap.min.js' %}"></script>
</body>
</html>
13、修改index.html，继承base.html
{% extends 'base.html' %}
{% load staticfiles %}
{% block title %}首页{% endblock %}
{% block content %}
    <div class="row">
        <div class="col-md-3 text-center h4">
            <a href="#">
                <img src="{% static 'imgs/linux.jpg' %}" width="150px"><br>主机信息
            </a>
        </div>
        <div class="col-md-3 text-center h4">
            <a href="#">
                <img src="{% static 'imgs/linux.jpg' %}" width="150px"><br>添加主机
            </a>
        </div>
        <div class="col-md-3 text-center h4">
            <a href="#">
                <img src="{% static 'imgs/linux.jpg' %}" width="150px"><br>添加模块
            </a>
        </div>
        <div class="col-md-3 text-center h4">
            <a href="#">
                <img src="{% static 'imgs/linux.jpg' %}" width="150px"><br>执行任务
            </a>
        </div>
    </div>
{% endblock %}

14、设计模型
# webansi/models.py
from django.db import models

class HostGroup(models.Model):
    hostgroup = models.CharField(max_length=20, unique=True)

    def __str__(self):
        return self.hostgroup

class Host(models.Model):
    hostname = models.CharField(max_length=50, unique=True)
    ipaddr = models.CharField(max_length=15, unique=True)
    group = models.ForeignKey(HostGroup, on_delete=models.CASCADE)

    def __str__(self):
        return "<%s -> %s>" % (self.hostname, self.group)

class AnsiModule(models.Model):
    mod_name = models.CharField(max_length=30)

    def __str__(self):
        return self.mod_name

class ModArgs(models.Model):
    args_text = models.CharField(max_length=100)
    mod = models.ForeignKey(AnsiModule, on_delete=models.CASCADE)

    def __str__(self):
        return "<%s -> %s>" % (self.args_text, self.mod)
15、生成数据库表
(djenv) [root@room8pc16 myansible]# python manage.py makemigrations
(djenv) [root@room8pc16 myansible]# python manage.py migrate
(djenv) [root@room8pc16 myansible]# python manage.py createsuperuser

16、查看数据库
一个sqlite文件就是一个数据库
(djenv) [root@room8pc16 myansible]# sqlite3 db.sqlite3
sqlite> .help
sqlite> .tables
sqlite> .schema webansi_hostgroup
sqlite> select * from webansi_host;

17、将模型注册到后台管理界面
# vim webansi/admin.py
from django.contrib import admin
from .models import HostGroup, Host, AnsiModule, ModArgs

for item in [HostGroup, Host, AnsiModule, ModArgs]:
    admin.site.register(item)

18、定制后台管理界面
from django.contrib import admin
from .models import HostGroup, Host, AnsiModule, ModArgs

class HostAdmin(admin.ModelAdmin):
    list_display = ('hostname', 'ipaddr', 'group')
    search_fields = ('hostname', 'ipaddr')
    # 用在有外键的项目上，创建主机时，可以显示组的详细信息
    raw_id_fields = ('group',)

class HostGroupAdmin(admin.ModelAdmin):
    search_fields = ('hostgroup', )

admin.site.register(Host, HostAdmin)
admin.site.register(HostGroup, HostGroupAdmin)

for item in [AnsiModule, ModArgs]:
    admin.site.register(item)

19、为了实现相应的效果，创建3台虚拟机
node1、node2作为web服务器，node3作为数据库服务器

20、创建ansible的工作目录及配置文件
(djenv) [root@room8pc16 myansible]# mkdir ansicfg
(djenv) [root@room8pc16 myansible]# vim ansicfg/ansible.cfg
[defaults]
inventory = dhosts.py
remote_user = root

21、创建动态主机清单文件dhosts.py
动态主机清单要求输出以下json样式：
{
    "webservers": {"hosts": ["192.168.4.1", "192.168.4.2"]}
    "dbservers": {"hosts": ["192.168.4.3"}
}

(djenv) [root@room8pc16 myansible]# pip install sqlalchemy
# ansicfg/dhosts.py
#!/opt/djenv/bin/python

from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import json

engine = create_engine(
    'sqlite:////var/ftp/nsd2018/nsd1805/python/ansible_project/myansible/db.sqlite3',
    encoding='utf8',
)
Base = declarative_base()
Session = sessionmaker(bind=engine)

class HostGroup(Base):
    __tablename__ = 'webansi_hostgroup'
    id = Column(Integer, primary_key=True)
    hostgroup = Column(String(20), unique=True, nullable=False)

    def __str__(self):
        return self.hostgroup

class Host(Base):
    __tablename__ = 'webansi_host'
    id = Column(Integer, primary_key=True)
    hostname = Column(String(50), unique=True, nullable=False)
    ipaddr = Column(String(15), unique=True, nullable=False)
    group_id = Column(Integer, ForeignKey('webansi_hostgroup.id'))

    def __str__(self):
        return "[%s: %s]" % (self.hostname, self.ipaddr)

if __name__ == '__main__':
    session = Session()
    qset = session.query(Host.ipaddr, HostGroup.hostgroup)\
        .join(HostGroup, Host.group_id==HostGroup.id)
    result = {}
    for host, group in qset:
        if group not in result:
            result[group] = {}  # {"webservers": {}}
            result[group]["hosts"] = []  # {"webservers": {"hosts": []}}
        result[group]["hosts"].append(host)

    print(json.dumps(result))

(djenv) [root@room8pc16 myansible]# chmod +x ansicfg/dhosts.py

22、编写主机信息页
(1)配置url
    url(r'^$', views.mainpage, name='mainpage'),
(2)创建函数
def mainpage(request):
    return render(request, 'mainpage.html')
(3)生成模板文件
配置本机可以免密登陆到远程服务器
(djenv) [root@room8pc16 ansicfg]# pip install ansible-cmdb
(djenv) [root@room8pc16 ansicfg]# ansible all -m setup --tree out
(djenv) [root@room8pc16 ansicfg]# ansible-cmdb out/ > ../webansi/templates/mainpage.html
(4)在index.html中修改超链接，把“主机信息”的超链接改为{% url 'mainpage' %}

23、编写添加主机页面
(1)配置url
    url(r'^addhosts/$', views.add_hosts, name='addhosts'),
(2)创建函数
def add_hosts(request):
    hostgroup = HostGroup.objects.all()
    return render(request, 'addhosts.html', {'hostgroup': hostgroup})
(3)生成模板文件
# webansi/templates/addhosts.html
{% extends 'base.html' %}
{% block title %}添加主机（组）{% endblock %}
{% block content %}
    <table class="table table-bordered table-hover table-striped h4">
        <tr class="info">
            <td>主机组</td>
            <td>主机</td>
        </tr>
        {% for group in hostgroup %}
            <tr>
                <td>{{ group.hostgroup }}</td>
                <td>
                    <ul class="list-unstyled">
                        {% for host in group.host_set.all %}
                            <li>{{ host.hostname }}</li>
                        {% endfor %}
                    </ul>
                </td>
            </tr>
        {% endfor %}
    </table>
{% endblock %}

(4)在index.html中修改超链接，把“添加主机”的超链接改为{% url 'addhosts' %}
(5)在addhosts.html增加表单
在table的上方，加入以下内容：
<form class="form-inline" action="" method="post" role="form" style="margin-bottom: 10px">
    {% csrf_token %}
    <div class="form-group">
        <label>主机名：</label>
        <input class="form-control" type="text" name="host">
    </div>
    <div class="form-group">
        <label>ip地址：</label>
        <input class="form-control" type="text" name="ipaddr">
    </div>
    <div class="form-group">
        <label>主机组：</label>
        <input class="form-control" type="text" name="group">
    </div>
    <div class="form-group">
        <input class="btn btn-primary" type="submit" value="提 交">
    </div>
</form>
(6)修改函数，将表单提交的主机信息写入数据库
def add_hosts(request):
    if request.method == 'POST':
        group = request.POST.get('group').strip()
        host = request.POST.get('host').strip()
        ipaddr = request.POST.get('ipaddr').strip()
        if group:
            g = HostGroup.objects.get_or_create(hostgroup=group)[0]
            if host and ipaddr:
                g.host_set.get_or_create(hostname=host, ipaddr=ipaddr)
    hostgroup = HostGroup.objects.all()
    return render(request, 'addhosts.html', {'hostgroup': hostgroup})

24、编写添加模块页面
(1)配置url
    url(r'^addmodules/$', views.add_modules, name='addmodules'),
(2)创建函数
def add_modules(request):
    all_modules = AnsiModule.objects.all()
    return render(request, 'addmodules.html', {'all_modules': all_modules})
(3)生成模板文件
# webansi/templates/addmodules.html
{% extends 'base.html' %}
{% block title %}添加模块{% endblock %}
{% block content %}
    <table class="table table-bordered table-hover table-striped h4">
        <tr class="info">
            <td>模块</td>
            <td>参数</td>
        </tr>
        {% for mod in all_modules %}
            <tr>
                <td>{{ mod.mod_name }}</td>
                <td>
                    <ul class="list-unstyled">
                        {% for args in mod.modargs_set.all %}
                            <li>{{ args.args_text }}</li>
                        {% endfor %}
                    </ul>
                </td>
            </tr>
        {% endfor %}
    </table>
{% endblock %}
(4)在index.html中修改超链接，把“添加主机”的超链接改为{% url 'addmodules' %}
(5)在addmodules.html增加表单
在table的上方，加入以下内容：
<form class="form-inline" action="" method="post" role="form" style="margin-bottom: 10px">
    {% csrf_token %}
    <div class="form-group">
        <label>模块：</label>
        <input class="form-control" type="text" name="mod">
    </div>
    <div class="form-group">
        <label>参数：</label>
        <input class="form-control" type="text" name="args">
    </div>
    <div class="form-group">
        <input class="btn btn-primary" type="submit" value="提 交">
    </div>
</form>
(6)修改函数，将表单提交的模块信息写入数据库
def add_modules(request):
    if request.method == 'POST':
        mod = request.POST.get('mod').strip()
        args = request.POST.get('args').strip()
        if mod and args:
            m = AnsiModule.objects.get_or_create(mod_name=mod)[0]
            m.modargs_set.get_or_create(args_text=args)
    all_modules = AnsiModule.objects.all()
    return render(request, 'addmodules.html', {'all_modules': all_modules})

25、实现执行任务功能
(1)配置url
    url(r'^tasks/$', views.tasks, name='tasks'),
(2)创建函数
def tasks(request):
    hosts = Host.objects.all()
    hostgroup = HostGroup.objects.all()
    all_modules = AnsiModule.objects.all()
    context = {'hosts': hosts, 'hostgroup': hostgroup, 'all_modules': all_modules}
    return render(request, 'tasks.html', context)
(3)生成模板文件tasks.html
{% extends 'base.html' %}
{% block title %}执行任务{% endblock %}
{% block content %}
    <ul class="nav nav-tabs">
        <li class="active"><a href="#host" data-toggle="tab">主机</a></li>
        <li><a href="#group" data-toggle="tab">主机组</a></li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane active fade in" id="host">host</div>
        <div class="tab-pane active fade" id="group">group</div>
    </div>
{% endblock %}
(4)在index.html中修改超链接，把“执行任务”的超链接改为{% url 'tasks' %}
(5)修改tasks.html，将数据显示出来
{% extends 'base.html' %}
{% block title %}执行任务{% endblock %}
{% block content %}
    <ul class="nav nav-tabs">
        <li class="active"><a href="#host" data-toggle="tab">主机</a></li>
        <li><a href="#group" data-toggle="tab">主机组</a></li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane active fade in" id="host">
            <form action="" method="post" role="form">
            {% csrf_token %}
                <div class="form-group">
                    <select name="host" class="form-control">
                        {% for host in hosts %}
                            <option value="{{ host.ipaddr }}">{{ host.hostname }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="form-group">
                    <table class="table table-bordered table-hover table-striped h4">
                        <tr class="info">
                            <td>模块</td>
                            <td>参数</td>
                        </tr>
                        {% for mod in all_modules %}
                            <tr>
                                <td>
                                    <label>
                                        <input type="radio" name="mod" class="radio-inline" value="{{ mod.mod_name }}"> {{ mod.mod_name }}
                                    </label>
                                </td>
                                <td>
                                    <ul class="list-unstyled">
                                        {% for arg in mod.modargs_set.all %}
                                            <li>
                                                <label>
                                                    <input type="radio" name="arg" class="radio-inline" value="{{ arg.args_text }}"> {{ arg.args_text }}
                                                </label>
                                            </li>
                                        {% endfor %}

                                    </ul>
                                </td>
                            </tr>
                        {% endfor %}
                    </table>
                </div>
                <div class="form-group text-center">
                    <input class="btn btn-primary" type="submit" value="执 行">
                </div>
            </form>
        </div>
        <div class="tab-pane active fade" id="group">
            <form action="" method="post" role="form">
            {% csrf_token %}
                <div class="form-group">
                    <select name="group" class="form-control">
                        {% for hgroup in hostgroup %}
                            <option value="{{ hgroup.hostgroup }}">{{ hgroup.hostgroup }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="form-group">
                    <table class="table table-bordered table-hover table-striped h4">
                        <tr class="info">
                            <td>模块</td>
                            <td>参数</td>
                        </tr>
                        {% for mod in all_modules %}
                            <tr>
                                <td>
                                    <label>
                                        <input type="radio" name="mod" class="radio-inline" value="{{ mod.mod_name }}"> {{ mod.mod_name }}
                                    </label>
                                </td>
                                <td>
                                    <ul class="list-unstyled">
                                        {% for arg in mod.modargs_set.all %}
                                            <li>
                                                <label>
                                                    <input type="radio" name="arg" class="radio-inline" value="{{ arg.args_text }}"> {{ arg.args_text }}
                                                </label>
                                            </li>
                                        {% endfor %}

                                    </ul>
                                </td>
                            </tr>
                        {% endfor %}
                    </table>
                </div>
                <div class="form-group text-center">
                    <input class="btn btn-primary" type="submit" value="执 行">
                </div>
            </form>
        </div>
    </div>
{% endblock %}

26、修改视图，当在任务页提交表单后，真正的在远程服务器上执行相应的指令
def exec_task(target, mod, args, inventory_path=['ansicfg/dhosts.py']):
    Options = namedtuple('Options', ['connection', 'module_path', 'forks', 'become', 'become_method', 'become_user', 'check', 'diff'])
    options = Options(connection='smart', module_path=['/to/mymodules'], forks=10, become=None, become_method=None, become_user=None, check=False, diff=False)
    loader = DataLoader()
    passwords = dict()
    inventory = InventoryManager(loader=loader, sources=inventory_path)
    variable_manager = VariableManager(loader=loader, inventory=inventory)
    play_source =  dict(
            name="Ansible Play",
            hosts=target,
            gather_facts='no',
            tasks=[
                dict(action=dict(module=mod, args=args), register='shell_out'),
             ]
        )
    play = Play().load(play_source, variable_manager=variable_manager, loader=loader)
    tqm = None
    try:
        tqm = TaskQueueManager(
                  inventory=inventory,
                  variable_manager=variable_manager,
                  loader=loader,
                  options=options,
                  passwords=passwords,
              )
        result = tqm.run(play)
    finally:
        if tqm is not None:
            tqm.cleanup()
        shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)

def tasks(request):
    if request.method == 'POST':
        target = request.POST.get('host')
        if not target:
            target = request.POST.get('group')
        mod = request.POST.get('mod')
        args = request.POST.get('arg')
        exec_task(target, mod, args)

    hosts = Host.objects.all()
    hostgroup = HostGroup.objects.all()
    all_modules = AnsiModule.objects.all()
    context = {'hosts': hosts, 'hostgroup': hostgroup, 'all_modules': all_modules}
    return render(request, 'tasks.html', context)

至此，全部已完成


附：
在添加主机页面，增加删除主机(组)的功能
1、创建url
    url(r'^delhost/(?P<host_id>\d+)/$', views.del_host, name='delhost'),
2、编写函数
def del_host(request, host_id):
    host = Host.objects.get(id=host_id)
    host.delete()
    return redirect('addhosts')
3、修改模板，在主机后面加上删除超链接
<li>{{ host.hostname }} <a href="{% url 'delhost' host_id=host.id %}">删除</a></li>








