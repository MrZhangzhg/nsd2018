python虚拟环境
1、创建虚拟环境
[root@room8pc16 day18]# python3 -m venv /opt/djenv
2、激活虚拟环境
[root@room8pc16 day18]# source /opt/djenv/bin/activate
3、安装django1.11.6
(djenv) [root@room8pc16 day18]# pip install django==1.11.6
(djenv) [root@room8pc16 day18]# python
>>> import django
>>> django.__version__
'1.11.6'

Django
1、创建项目：可以理解为是django实例的设置集合
(djenv) [root@room8pc16 day18]# django-admin startproject mysite
(djenv) [root@room8pc16 day18]# cd mysite/
manage.py: 项目管理工具
mysite/__init__.py：py2需要该文件，否则mysite不能当成包导入
mysite/settings.py: 项目配置文件
mysite/urls.py: 程序入口。用于URL和函数关联
mysite/wsgi.py: 部署django到web服务器时使用
2、django提供了一个内置的web服务器，仅适合开发测试使用
(djenv) [root@room8pc16 mysite]# python manage.py runserver
3、如果出现_sqlite问题，是因为django默认使用的数据库是sqlite3数据库，但是机器
没有提供对该数据库的支持。解决办法：
(1) # yum install -y sqlite-devel
(2) 把python重新编译一遍
4、使用mariadb数据库
(djenv) [root@room8pc16 mysite]# pip install pymysql
# vim mysite/__init__.py
import pymysql
pymysql.install_as_MySQLdb()

# yum install -y mariadb-server

[root@room8pc16 day18]# vim /etc/my.cnf
[mysqld]
default-time_zone = '+08:00'

MariaDB [(none)]> CREATE DATABASE dj1805 DEFAULT CHARSET utf8;

# vim mysite/settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dj1805',
        'USER': 'root',
        'PASSWORD': 'tedu.cn',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}
5、配置项目选项
# vim mysite/settings.py
ALLOWED_HOSTS = '*'
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False
(djenv) [root@room8pc16 mysite]# python manage.py runserver 0:80
6、生成默认的数据库表
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py migrate
7、创建管理员用户
(djenv) [root@room8pc16 mysite]# python manage.py createsuperuser
(djenv) [root@room8pc16 mysite]# python manage.py runserver 0:80
8、访问后台
http://127.0.0.1/admin/


创建应用：
1、创建
(djenv) [root@room8pc16 mysite]# python manage.py startapp polls
(djenv) [root@room8pc16 mysite]# ls polls/
2、配置项目集成应用
# vim mysite/settings.py
INSTALLED_APPS = [
    ... ...
    'polls',
]

用户访问django时，django将会查询mysite/urls.py，将网址与某个函数对应
如果项目中包含了大量的应用，和大量的URL，这个文件将会变得十分庞大，不好管理
可以将应的网址与函数对应关系交给应用处理
# vim mysite/urls.py
from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^polls/', include('polls.urls')),
]
在polls应用中创建urls.py
# vim polls/urls.py
from django.conf.urls import url
urlpatterns = [
]

URL规划：
http://127.0.0.1/polls/      # 列出所有的投票项
http://127.0.0.1/polls/1/    # 1号投票详细内容
http://127.0.0.1/polls/1/result/    # 显示投票结果

创建应用首页
1、为网址http://127.0.0.1/polls/起个名叫index，访问它的时候，使用views.index
函数进行响应
# vim polls/urls.py
from django.conf.urls import url
from . import views

urlpatterns = [
    url(r'^$', views.index, name='index')
]
2、创建视图函数
# vim polls/views.py
from django.shortcuts import render, HttpResponse

def index(request):
    return HttpResponse('<h1>Hello World!</h1>')
3、访问测试
http://127.0.0.1/polls/
4、配置模板Template
默认情况下，django会到应用目录下的templates目录中查找模板文件
[root@room8pc16 mysite]# mkdir polls/templates
# vim polls/templates/index.html
5、修改视图函数，令index函数返回index.html模板
# vim polls/views.py
from django.shortcuts import render, HttpResponse

def index(request):
    # return HttpResponse('<h1>Hello World!</h1>')
    return render(request, 'index.html')


Model：模型（数据库）
Polls应用有问题和选项，一个问题可以有很多选项。分别为它们创建模型。
问题模型Question有两个属性：question_text问题内容。pub_date发布日期
选项模型Choice有两个属性：choice_text选项内容。votes票数
1、编写模型
from django.db import models

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField()

    def __str__(self):
        return self.question_text

class Choice(models.Model):
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField()
    question = models.ForeignKey(Question, on_delete=models.CASCADE)

    def __str__(self):
        return "%s: %s" % (self.question, self.choice_text)
2、生成数据库
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py migrate
数据库中将会创建两张表：
polls_question(应用名_类名)：
id: 主键，django自动创建
question_text和pub_date对应class中的类变量
polls_choice:
id: 主键，django自动创建
choice_text和votes对应class中的类变量
q_id：django自动将class中的q变成q_id，作为外键
3、修改字段，将Choice类中的q改为question
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py migrate
检查polls_choice中字段的变化


重建删除表
MariaDB [dj1805]> drop table polls_question;
MariaDB [dj1805]> drop table polls_choice;
(djenv) [root@room8pc16 mysite]# rm -rf polls/migrations/*
(djenv) [root@room8pc16 mysite]# touch polls/migrations/__init__.py
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py sqlmigrate polls 0001
将0001init转换成sql语句后，在数据库中执行这些语句

将model注册到管理后台
# vim polls/admin.py
from django.contrib import admin
from .models import Question, Choice

admin.site.register(Question)
admin.site.register(Choice)


定制后台
1、指定显示的字段
# vim polls/admin.py

class QuestionAdmin(admin.ModelAdmin):
    list_display = ('question_text', 'pub_date')

admin.site.register(Question, QuestionAdmin)
admin.site.register(Choice)
2、添加过滤器
from django.contrib import admin
from .models import Question, Choice

class QuestionAdmin(admin.ModelAdmin):
    list_display = ('question_text', 'pub_date')
    list_filter = ('pub_date',)

admin.site.register(Question, QuestionAdmin)
admin.site.register(Choice)
3、增加可以在question_text中搜索的设置
from django.contrib import admin
from .models import Question, Choice

class QuestionAdmin(admin.ModelAdmin):
    list_display = ('question_text', 'pub_date')
    list_filter = ('pub_date',)
    search_fields = ('question_text',)

admin.site.register(Question, QuestionAdmin)
admin.site.register(Choice)
4、增加时间轴
from django.contrib import admin
from .models import Question, Choice

class QuestionAdmin(admin.ModelAdmin):
    list_display = ('question_text', 'pub_date')
    list_filter = ('pub_date',)
    search_fields = ('question_text',)
    date_hierarchy = 'pub_date'

admin.site.register(Question, QuestionAdmin)
admin.site.register(Choice)
5、按时间降序排序
from django.contrib import admin
from .models import Question, Choice

class QuestionAdmin(admin.ModelAdmin):
    list_display = ('question_text', 'pub_date')
    list_filter = ('pub_date',)
    search_fields = ('question_text',)
    date_hierarchy = 'pub_date'
    ordering = ['-pub_date']   # 没有减号，默认升序排列

admin.site.register(Question, QuestionAdmin)
admin.site.register(Choice)














