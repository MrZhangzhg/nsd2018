使用python shell
1、进入python shell
(djenv) [root@room8pc16 mysite]# python manage.py shell
>>> from polls.models import Question, Choice
2、查询全部实例
django为每个模型都设置了一个名为objects的管理器，这个管理器可以对模型进行增删改查
>>> Question.objects.all()
>>> Choice.objects.all()
返回值是由多个模型对象构成的查询集
3、创建问题
(1)通过创建实例的方式
>>> from django.utils import timezone
>>> q1 = Question(question_text="散伙饭去哪吃？", pub_date=timezone.now())
>>> print(q1.id)  # 因为没有写到数据呢，所以值是None
>>> q1.question_text
>>> q1.pub_date
>>> q1.save()   # COMMIT
>>> q1.id   # 有值了
(2)通过objects管理器创建
>>> q2 = Question.objects.create(question_text="休息去哪看红叶？", pub_date=timezone.now())
直接写入数据库，无需保存
4、创建选项
(1)通过创建实例的方式
>>> c1 = Choice(choice_text="KFC", question=q1)
>>> c1.save()
(2)通过object管理器
>>> Choice.objects.create(choice_text="涮羊肉", question=q1)
(3)通过问题的实例创建选项。
因为Question和Choice有主外键约束关系，所以django默认为每个Question实例都创建了
一个choice_set。这个choice_set也是个管理器，只不过他限定了问题。
>>> q1.choice_set.all()
>>> q1.choice_set.create(choice_text="全聚德")
5、修改内容：把属性重新赋值并保存
>>> q1.question_text = "毕业后，去哪聚餐？"
>>> q1.save()
6、删除
>>> c1.delete()  # 不要再save，否则删除后，又会重新保存至数据库
7、查询
(1)使用get，get要求返回一个实例，如果有多项或没有查询到则报错
>>> Question.objects.get(id=1)
>>> q2 = Question.objects.get(question_text="从达内毕业后的第一份工作，你期望的月薪是多少？")
>>> Question.objects.get(question_text__contains="毕业")
>>> q2.id
>>> q2.pub_date
(2)使用filter，filter返回查询集合
>>> Question.objects.filter(question_text__contains="毕业")
>>> qs = Question.objects.filter(question_text__contains=" 毕业")
>>> qs[0]
>>> qs[-1]   # 不允许使用负值
>>> len(qs)
>>> qs[len(qs) - 1]
>>> Question.objects.filter(pub_date__month=11)
>>> Question.objects.filter(pub_date__month=10)
>>> Question.objects.filter(question_text__startswith='毕业')
(3)排序: 返回查询集
>>> Question.objects.order_by('pub_date')
>>> Question.objects.order_by('pub_date')[:3]
>>> Question.objects.order_by('-pub_date')[:3]

自定义方法：
1、在Question中创建一个方法，用于判定问题是不是最近7天发布的
class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField()

    def was_publish_recently(self, days=7):
        return self.pub_date > timezone.now() - timedelta(days=days)

    def __str__(self):
        return self.question_text
2、重新导入模块
(djenv) [root@room8pc16 mysite]# python manage.py shell
>>> from polls.models import Question
>>> q1 = Question.objects.order_by('pub_date')[0]
>>> q2 = Question.objects.order_by('-pub_date')[0]
>>> q1.was_publish_recently()
>>> q2.was_publish_recently()
>>> q1.pub_date
>>> q2.pub_date


URL规划：
http://127.0.0.1/polls/      # 列出所有的投票项
http://127.0.0.1/polls/1/    # 1号投票详细内容
http://127.0.0.1/polls/1/result/    # 显示投票结果

一、完成首页，把所有的问题列出到页面
1、修改视图函数
# vim polls/views.py
from django.shortcuts import render
from .models import Question

def index(request):
    questions = Question.objects.order_by('-pub_date')
    return render(request, 'index.html', {'questions': questions})
2、修改模板，显示问题
# vim polls/templates/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Polls首页</title>
</head>
<body>
<h1>Polls首页</h1>
{{ questions }}
</body>
</html>
3、修改模板的显示
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Polls首页</title>
</head>
<body>
<h1>Polls首页</h1>
{{ questions }}
<hr>
<ul>
    {% for q in questions %}
        <li>{{ q.question_text }} {{ q.pub_date }}</li>
    {% endfor %}
</ul>
<hr>
<ul>
    {% for q in questions %}
        {% if q.was_publish_recently %}
            <li>{{ q.question_text }} {{ q.pub_date }}</li>
        {% endif %}
    {% endfor %}
</ul>
</body>
</html>


二、制作详情页
1、创建URL
# vim polls/urls.py
urlpatterns = [
    url(r'^$', views.index, name='index'),
    url(r'^(?P<question_id>\d+)/$', views.detail, name='detail'),
]
(\d+)是将URL中的数字放到分组中，question_id是传给views.detail函数的参数。
2、编写视图函数
# vim polls/views.py
def detail(request, question_id):
    return HttpResponse('<h1>%s: detail</h1>' % question_id)
3、访问http://127.0.0.1/polls/1/
4、修改首页，加入超链接，通过超链接可以跳转到详情页
<ul>
    {% for q in questions %}
        <li><a href="{% url 'detail' question_id=q.id %}" target="_blank">{{ q.question_text }}</a> {{ q.pub_date }}</li>
{#        <li><a href="/polls/{{ q.id }}/" target="_blank">{{ q.question_text }}</a> {{ q.pub_date }}</li>#}
    {% endfor %}
</ul>
5、修改视图函数，从数据库中取出数据
def detail(request, question_id):
    question = Question.objects.get(id=question_id)
    return render(request, 'detail.html', {'question': question})
6、创建模板
模板包含表单，表单提交时，把数据发给http://127.0.0.1/polls/1/vote
# vim polls/templates/detail.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>调查详情</title>
</head>
<body>
<h1>{{ question.question_text }}</h1>
<form action="" method="post">
    {% for c in question.choice_set.all %}
        <label>
            <input type="radio" name="choice" value="{{ c.id }}">{{ c.choice_text }}
        </label><br>
    {% endfor %}
    <input type="submit" value="提交">
</form>

{#<ul>#}
{#    {% for choice in question.choice_set.all %}#}
{#        <li>{{ choice.choice_text }}</li>#}
{#    {% endfor %}#}
{#</ul>#}
</body>
</html>


实现投票功能
1、为投票功能指定URL
urlpatterns = [
    url(r'^$', views.index, name='index'),
    url(r'^(?P<question_id>\d+)/$', views.detail, name='detail'),
    url(r'^(?P<question_id>\d+)/vote/$', views.vote, name='vote'),
]
2、在detail.html模板中，指定form的action
<form action="{% url 'vote' question_id=question.id %}" method="post">
3、编写vote函数
def vote(request, question_id):
    choice_id = request.POST.get('choice')
    question = Question.objects.get(id=question_id)
    choice = question.choice_set.get(id=choice_id)
    choice.votes += 1
    choice.save()

    return redirect('result', question_id=question_id)

实现结果页面
1、配置URL
urlpatterns = [
    url(r'^$', views.index, name='index'),
    url(r'^(?P<question_id>\d+)/$', views.detail, name='detail'),
    url(r'^(?P<question_id>\d+)/vote/$', views.vote, name='vote'),
    url(r'^(?P<question_id>\d+)/result/$', views.result, name='result'),
]
2、编写result函数
def result(request, question_id):
    question = Question.objects.get(id=question_id)
    return render(request, 'result.html', {'question': question})
3、完成result.html模板
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>投票结果</title>
</head>
<body>
<h1>{{ question.question_text }}</h1>
<table width="400">
    <tr>
        <th>问题</th>
        <th>票数</th>
    </tr>
    {% for choice in question.choice_set.all %}
        <tr>
            <td>{{ choice.choice_text }}</td>
            <td>{{ choice.votes }}</td>
        </tr>
    {% endfor %}
</table>
</body>
</html>

关闭CSRF功能
# vim mysite/setting.py
MIDDLEWARE = [
    ... ...
    # 'django.middleware.csrf.CsrfViewMiddleware',
    ... ...
]





