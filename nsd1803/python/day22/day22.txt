创建一个新的项目
(djenv) [root@room8pc16 day22]# django-admin startproject mysite
(djenv) [root@room8pc16 day22]# cd mysite/
(djenv) [root@room8pc16 mysite]# python manage.py startapp myapp
修改settings.py
ALLOWED_HOSTS = '*'
INSTALLED_APPS = [
    ... ...
    'myapp',
]
MIDDLEWARE = [
    ... ...
    # 'django.middleware.csrf.CsrfViewMiddleware',
    ... ...
]
LANGUAGE_CODE = 'zh-Hans'
TIME_ZONE = 'Asia/Shanghai'
(djenv) [root@room8pc16 mysite]# python manage.py migrate
(djenv) [root@room8pc16 mysite]# python manage.py createsuperuser

将http://127.0.0.1/myapp/开头的路径交给myapp应用处理
# vim mysite/urls.py
from django.conf.urls import url, include
from django.contrib import admin
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^myapp/', include('myapp.urls')),
]
# vim myapp/urls.py
from django.conf.urls import url
from . import views
urlpatterns = [
    url(r'^hello/$', views.hello, {'age': 23}, name='hello'),
]
# vim views.py
from django.shortcuts import render, HttpResponse
def hello(request, age):
    return HttpResponse('Hello World! %s' % age)
访问http://127.0.0.1/myapp/hello/

通过URL获取参数
# urls.py
urlpatterns = [
    url(r'^hello/$', views.hello, {'age': 23}, name='hello'),
    url(r'^(?P<name>[a-zA-Z]+)/(?P<age>\d+)/', views.info, name='info'),
]
# views.py
def info(request, name, age):
    return HttpResponse('%s is %s years old.' % (name, age))
访问http://127.0.0.1/myapp/zhangsan/25/

URL规划可以参见RESTful
http://www.runoob.com/w3cnote/restful-architecture.html

表单的方法
1、访问首页，由index函数处理
# urls.py
url(r'^$', views.index, name='index'),
2、视图。如果方法是POST，则获取用户名，否则用户名设置为None
def index(request):
    if request.method == 'POST':
        user = request.POST.get('xm')
    else:
        user = None
    return render(request, 'index.html', {'user': user})
3、模板
# mkdir myapp/templates
# myapp/templates/index.html
<body>
<form action="" method="post">
    {% if user %}
        {{ user }}
        <hr>
    {% endif %}
    姓名：<input type="text" name="xm">
    <input type="submit" value="提交">
</form>
</body>
4、访问http://127.0.0.1/myapp/

5、Cookie
HTTP是无状态的，也就是相同的用户即使在短时间内连续访问，服务器也不认识

6、登陆
（1）三个页面/myapp/home/用于显示登陆表单，访问/myapp/protect/如果用户没有
登陆跳转到home页面。登陆时/myapp/login/用于验证用户
（2）构建URL
    url(r'^home/$', views.home, name='home'),
    url(r'^protect/$', views.protect, name='protect'),
    url(r'^login/$', views.login, name='login'),
（2）编写视图
def home(request):
    return render(request, 'home.html')

def login(request):
    user = request.POST.get('username')
    passwd = request.POST.get('password')
    if user == 'tom' and passwd == '123456':
        request.session['IS_LOGINED'] = True
        return redirect('protect')
    else:
        return redirect('home')

def protect(request):
    is_login = request.session.get('IS_LOGINED', False)
    if is_login:
        return render(request, 'protect.html')
    return redirect('home')
（3）编写模板
# home.html
<body>
<form action="/myapp/login/" method="post">
    用户名：<input type="text" name="username"><br>
    密 码：<input type="password" name="password"><br>
    <input type="submit" value="登陆">
</form>
</body>
# protect.html
<body>
登陆成功后可见页面
</body>
（4）访问http://127.0.0.1/myapp/protect将会跳转到home

模板测试
(1)定义url.py
    url(r'^template/$', views.template, name='template'),
(2)创建视图
def template(request):
    user = 'zhangsan'
    age = 25
    friends = ['lisi', 'wangwu', 'bob', 'alice']
    info = {'phone': '13566778899', 'email': 'zs@163.com'}
    context = {
        'user': user, 'age': age, 'friends': friends,
        'info': info,
    }
    return render(request, 'template.html', context)
(3)编写模板
视图函数把context字典传递给模板，注意，没有把context这个名字传过去，传过去
的是字典本身（{}），字典中的key相当于是传递给模板的变量名，模板只要使用这个变
量名，就可以得到相应的值
# template.html
<body>
{{ user }}今年{{ age }}岁了。
<hr>
{{ friends }}: {{ friends.0 }}, {{ friends.1 }}
<hr>
{{ info }}: {{ info.phone }}, {{ info.email }}
<hr>
{{ info.keys }}, {{ info.values }}, {{ info.items }}
<hr>
<ol>
    {% for f in friends %}
        <li>{{ f }}</li>
    {% endfor %}
</ol>
<ul>
    {% for f in friends %}
        <li>{{ forloop.counter }}{{ f }}</li>
    {% endfor %}
</ul>
<ul>
    {% for f in friends %}
        <li>{{ forloop.counter0 }}{{ f }}</li>
    {% endfor %}
</ul>
</body>

模板继承：有很多网页，这些页面的整体结构完全一样，只是其中的内容不一样
可以先建立一个基础模板，其他页面继承这个模板，就可以拥有一致的风格
1、建立基础模板base.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}{% endblock %}</title>
    <style>
        .container{margin: 0 auto; width: 800px}
        .header{height: 100px; background: #CCCCCC}
        .footer{text-align: center;}
    </style>
</head>
<body>
<div class="container">
    <div class="header"></div>
    <div class="main">{% block content %}{% endblock %}</div>
    <div class="footer">
        <a href="http://linux.tedu.cn">达内云计算学院</a>
    </div>
</div>
</body>
</html>
2、其他页面，继承模板
{% extends 'base.html' %}

{% block title %}模板测试{% endblock %}

{% block content %}
{{ user }}今年{{ age }}岁了。
<hr>
{{ friends }}: {{ friends.0 }}, {{ friends.1 }}
<hr>
{{ info }}: {{ info.phone }}, {{ info.email }}
<hr>
{{ info.keys }}, {{ info.values }}, {{ info.items }}
<hr>
<ol>
    {% for f in friends %}
        <li>{{ f }}</li>
    {% endfor %}
</ol>
<ul>
    {% for f in friends %}
        <li>{{ forloop.counter }}{{ f }}</li>
    {% endfor %}
</ul>
<ul>
    {% for f in friends %}
        <li>{{ forloop.counter0 }}{{ f }}</li>
    {% endfor %}
</ul>
<hr>
<table border="1px">
    {% for key, val in info.items %}
        <tr>
            <td>{{ key }}</td>
            <td>{{ val }}</td>
        </tr>
    {% endfor %}
</table>
{% if age <= 22 %}
    上学
{% elif age >= 60 %}
    退休
{% else %}
    上班
{% endif %}
<hr>
{{ user|capfirst }}, {{ user|upper }}, {{ friends|join:", " }}
{% endblock %}


模型
1、models.py
from django.db import models

class Department(models.Model):
    dep_name = models.CharField(max_length=50, unique=True)
    def __str__(self):
        return self.dep_name

class Employee(models.Model):
    emp_name = models.CharField(max_length=20)
    phone = models.CharField(max_length=11)
    depart = models.ForeignKey(Department, models.CASCADE)
    def __str__(self):
        return self.emp_name
2、生成数据库表
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py migrate
(djenv) [root@room8pc16 mysite]# sqlite3 db.sqlite3
sqlite> .tables
sqlite> .schema myapp_department
sqlite> .schema myapp_employee
操作数据
(djenv) [root@room8pc16 mysite]# python manage.py shell
>>> from myapp.models import Department, Employee
>>> Department.objects.all()
>>> d1 = Department(dep_name='development')
>>> d1.save()
>>> Department.objects.create(dep_name='devops')
>>> Department.objects.create(dep_name='operations')
>>> Department.objects.order_by('id')
>>> Department.objects.filter(dep_name='devops')
>>> Department.objects.filter(dep_name__contains='dev')
>>> Department.objects.filter(dep_name__regex='s$')  # 正则匹配
>>> Department.objects.filter(id__gt=2)  # id>2的条目
>>> Department.objects.exclude(id__gt=2)  # 排除id>2的条目
>>> d1.employee_set.create(emp_name='张三', phone='13345678900')
>>> d1.employee_set.all()
>>> d1.employee_set.create(emp_name='李四', phone='13345678900')
>>> e1 = d1.employee_set.create(emp_name='李四', phone='13345678900')
>>> e1.delete()
>>> e2 = d1.employee_set.all()[1]
>>> e2.phone = '13344556677'
>>> e2.save()
>>> d1.employee_set.get_or_create(emp_name='张三', phone='13345678900')
不成功，因为数据库中已有张三
>>> e2.depart  # 反向获得e2员工所在的部门实例












