使用python shell
1、激活虚拟环境
2、进入python shell
(djenv) [root@room8pc16 mysite]# python manage.py shell
3、导入模型
>>> from polls.models import Question, Choice
4、显示所有Question的方法
>>> Question.objects.all()  # 返回的是查询集，查询集中保存的是所有问题的实例
>>> q = Question.objects.all()[0]  # 取出第一个实例
>>> q.id
>>> q.question_text
>>> q.publish_date
5、创建一个question实例
>>> from django.utils import timezone
>>> q1 = Question(
        question_text='你毕业后希望进入哪家公司工作？',
        publish_date=timezone.now()
    )
>>> q1.save()
6、修改
>>> q1.question_text='你期待哪家公司给你发offer？'
>>> q1.save()
7、在models中添加方法，用于判断某问题是不是1天内发布的
8、添加完毕后，需要退出再重新进入python shell
>>> from polls.models import Question, Choice
>>> q = Question.objects.all()[1]
>>> q.was_published_recently()
>>> q1 = Question.objects.all()[0]
>>> q1
>>> q1.was_published_recently()
9、通过关键字查询，返回值是实例，如果不存在则报错
>>> Question.objects.get(id=1)
>>> Question.objects.get(question_text='你计划在哪个城市找工作？')
10、通过主键查询，返回值是实例，如果不存在则报错
>>> Question.objects.get(pk=1)
11、使用双下划线过滤属性
>>> Question.objects.filter(id=1)
>>> Question.objects.filter(question_text__startswith='你')
>>> Question.objects.filter(publish_date__year=2018)
12、Question和Choice有主外键关系，一个问题question可以有多个选项choice
django提供了通过question获得对应choice的方法
>>> q = Question.objects.get(pk=2)
>>> q.choice_set.all()
13、创建choice条目，create不需要save，直接写入数据库
>>> q.choice_set.create(choice_text='阿里巴巴', votes=0)
>>> c = Choice.objects.create(
        choice_text='网易', votes=0, question_id=2
    )
>>> q.choice_set.create(choice_text='达内', votes=0)
>>> q.choice_set.all()
14、创建投票问题详情页
当用户访问http://127.0.0.1/polls/1时采用detail函数进行处理
1表示1号问题，也有2、3、4……很多问题，可以通过正则表达式来匹配数字
这些数字还需要作为参数传递给视图函数，修改urls.py如下：
 url(r'^(?P<q_id>\d+)/$', views.detail, name='detail')
15、在views.py中创建detail函数
def detail(request, q_id):
    return HttpResponse('你正在查看第%s个问题' % q_id)
16、创建模板，在模板中显示问题
（1）修改detail视图，将变量数据传给模板
def detail(request, q_id):
    return render(request, 'polls/detail.html', {'question_id': q_id})
这里的字典，相当于是向detail.html传入了question_id=1
（2）创建detail.html，变量用{{ question_id }}表示
    <p>你正在查看第{{ question_id }}个问题</p>
17、编写投票结果页
当用户访问http://127.0.0.1/1/result/时，使用result处理，返回result.html
18、编写投票功能页
当用户访问http://127.0.0.1/1/vote/时，使用vote函数处理，不用返回模板
19、修改主页，主面中显示所有问题，点击某个问题的时候，跳转到该问题的详情页
（1）修改视图函数
def polls_index(request):
    latest_qlist = Question.objects.order_by('-publish_date')[:5]
    context = {'qlist': latest_qlist}
    return render(request, 'polls/polls_index.html', context)
（2）修改模板文件，列出所有的问题
<body>
<div class="container bg-info">
    <p>polls主页</p>
    {% for q in qlist %}
        <div>
            {{ q.id }}: <a href="/polls/{{ q.id }}/">{{ q.question_text }}</a> {{ q.publish_date }}
        </div>
    {% endfor %}
</div>
</body>
20、修改问题详情
（1）将问题详请发送到模板
def detail(request, q_id):
    question = get_object_or_404(Question, pk=q_id)
    return render(request, 'polls/detail.html', {'question': question})
（2）修改模板文件detail.html，显示问题的内容
<body>
<div class="container bg-info">
    <p>你正在查看第{{ question.id }}个问题</p>
    <h1>{{ question.question_text }}</h1>
    <ul>
        {% for choice in question.choice_set.all %}
            <li>{{ choice.choice_text }}</li>
        {% endfor %}
    </ul>
</div>
</body>
21、在detail.html中加入表单，选择某一项之后，将数据发送给
http://127.0.0.1/polls/1/vote/处理
（1）修改setting.py，禁用csrf功能。CSRF是防止跨站攻击的。
MIDDLEWARE = [
    ...
    # 'django.middleware.csrf.CsrfViewMiddleware',
    ...
]
（2）修改模板detail.html
<body>
<div class="container bg-info">
    <p>你正在查看第{{ question.id }}个问题</p>
    <h1>{{ question.question_text }}</h1>
    <form role="form" action="/polls/{{ question.id }}/vote/" method="post">
        {% for choice in question.choice_set.all %}
        <div class="form-group">
            <label>
                <input type="radio" name="c_id" value="{{ choice.id }}">{{ choice.choice_text }}
            </label>
        </div>
        {% endfor %}
        <input class="btn btn-primary" type="submit" value="提交">
    </form>
</div>
</body>
（3）修改vote函数，接收表单传过来的c_id，再到数据库中把c_id对应的choice找到
def vote(request, q_id):
    question = get_object_or_404(Question, pk=q_id)
    c_id = request.POST.get('c_id')
    choice = question.choice_set.get(pk=c_id)
    choice.votes += 1
    choice.save()
    return redirect('result', q_id=q_id)  # redirect不携带参数，访问新网页
'result'是urls.py中定义的/polls/1/result/网址的名字
22、完成结果页面
（1）修改result函数
def result(request, q_id):
    question = get_object_or_404(Question, pk=q_id)
    return render(request, 'polls/result.html', {'question': question})
（2）修改result.html模板文件
<body>
<div class="container">
    <p>你正在查看第{{ question_id }}个问题的结果</p>
    <h1>{{ question.question_text }}</h1>
    <table class="table table-bordered table-striped">
        <tr class="info">
            <td>选项</td>
            <td>票数</td>
        </tr>
        {% for choice in question.choice_set.all %}
            <tr>
                <td>{{ choice.choice_text }}</td>
                <td>{{ choice.votes }}</td>
            </tr>
        {% endfor %}
    </table>
    <a href="/polls/">返回首页</a>
</div>
</body>








