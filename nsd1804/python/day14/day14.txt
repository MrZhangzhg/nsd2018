安装基于python3的ansible
# pip3 install ansible

使用ansible
1、在物理主机上配置名称解析
[root@room8pc16 day14]# vim /etc/hosts
[root@room8pc16 day14]# for i in {1..6}
> do
> echo -e "192.168.4.$i\tnode$i.tedu.cn\tnode$i" >> /etc/hosts
> done
2、收集被管端的密钥
[root@room8pc16 day14]# ssh-keyscan 192.168.4.{2..4} node{2..4} node{2..4}.tedu.cn >> ~/.ssh/known_hosts
3、配置ansible的工作环境
[root@room8pc16 day14]# mkdir myansi
[root@room8pc16 day14]# cd myansi
[root@room8pc16 myansi]# vim ansible.cfg
[defaults]
inventory = hosts
remote_user = root
[root@room8pc16 myansi]# vim hosts
[dbservers]
node2.tedu.cn

[webservers]
node3.tedu.cn
node4.tedu.cn
4、测试到远程服务器的连通性
[root@room8pc16 myansi]# ansible all -m ping -k
5、执行ad-hoc命令，在webservers上安装httpd
[root@room8pc16 myansi]# ansible webservers -m yum -a\
                         "name=httpd state=latest" -k
6、配置vim
[root@room8pc16 myansi]# vim ~/.vimrc
set ai  # 自动缩进
set ts=4  # tab键缩进4个空格
set et   # 将tab转换成空格
autocmd FileType yaml setlocal sw=2 ts=2 et ai  # 如果是yaml文件才生效
6、配置playbook，实现免密登陆
[root@room8pc16 myansi]# ansible-doc -l | grep auth
[root@room8pc16 myansi]# ansible-doc authorized_key
[root@room8pc16 myansi]# vim auth_key.yml
---
- name: configure ssh key
  hosts: all
  tasks:
    - name: upload ssh key
      authorized_key:
        user: root
        state: present
        key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
检查语法，没有问题后执行
[root@room8pc16 myansi]# ansible-playbook --syntax-check auth_key.yml
[root@room8pc16 myansi]# ansible-playbook auth_key.yml -k
7、在本地创建files/server.repo文件，用copy模块发送到所有的远程主机
[root@room8pc16 myansi]# vim copy_repo.yml
---
- name: copy yum config file
  hosts: all
  tasks:
    - name: config yum file
      copy:
        src: files/server.repo
        dest: /etc/yum.repos.d/server.repo
[root@room8pc16 myansi]# ansible-playbook copy_repo.yml
8、配置dbservers安装mariadb，web服务器配置httpd/php/php-mysql
[root@room8pc16 myansi]# vim lamp.yml
---
- name: configure web servers
  hosts: webservers
  tasks:
    - name: install web pkgs
      yum:
        name: "{{item}}"
        state: latest
      with_items:
        - httpd
        - php
        - php-mysql
    - name: configure web service
      service:
        name: httpd
        state: started
        enabled: yes

- name: configure db servers
  hosts: dbservers
  tasks:
    - name: install db pkgs
      yum:
        name: mariadb-server
        state: latest
    - name: configure db service
      service:
        name: mariadb
        state: started
        enabled: yes
[root@room8pc16 myansi]# ansible-playbook  lamp.yml

https://docs.ansible.com/ansible/latest/index.html
按ctrl+f搜索python api

命名元组：基于元组，为元组的每个元素起名
>>> from collections import namedtuple
>>> Point = namedtuple('Point', ['x', 'y', 'z'])
>>> a = Point(10, 20, 50)
>>> len(a)  # a可以像普通元组一样使用
>>> a[0]
>>> a[1]
>>> a[:2]
>>> a.x   # a三个元素的下标，名称分别为x、y、z
>>> a.y
>>> a.z

ansible模块说明
# DataLoader用于分析yaml/json/ini文件
from ansible.parsing.dataloader import DataLoader
# VariableManager用于ansible的变量
from ansible.vars.manager import VariableManager
# InventoryManager用于管理主机清单
from ansible.inventory.manager import InventoryManager
# Play用于创建Playbook对象，还能自动创建任务对象
from ansible.playbook.play import Play
# TaskQueueManager用于管理任务队列
from ansible.executor.task_queue_manager import TaskQueueManager
# CallbackBase不是必须的，用于自定义输出
from ansible.plugins.callback import CallbackBase
# ansible.constants定义ansible使用的一些常量
import ansible.constants as C

# Options是执行ansible时传递的选项，多数都是可选项
Options = namedtuple('Options', ['connection', 'module_path', 'forks', 'become', 'become_method', 'become_user', 'check', 'diff'])
# connection是连接的类型：分别有local(本地执行任务)、ssh(远程执行任务)、smart(智能判断)
# module_path，除默认的模块路径以外的、自定义的模块目录
# forks，指定创建多少子进程
# become，使用become执行操作，不明确提示密码
# become_method，切换用户的方法，如su、sudo
# become_user，切换成哪个用户
# check，不真正执行命令，只是检查是否会有改变
# diff，如果小文件有改动，显示改动部分

passwords = dict()  # 定义各种密码，没有密码则使用空字典
# 定义主机清单文件，sources可以使用主机配置文件路径，也可以使用逗号隔开的所有主机
inventory = InventoryManager(loader=loader, sources='localhost,')
inventory = InventoryManager(loader=loader, sources=['myansi/hosts'])

play_source =  dict(
        name = "Ansible Play",  # Play的名字
        # hosts = 'localhost',    # 在哪些主机上执行命令
        hosts = 'dbservers',
        gather_facts = 'no',    # 不收集主机信息
        tasks = [
            dict(action=dict(module='yum', args='name=vsftpd state=present'), register='shell_out'),
            # dict(action=dict(module='shell', args='ls'), register='shell_out'),
            # dict(action=dict(module='debug', args=dict(msg='{{shell_out.stdout}}')))
         ]
    )
# 实例化Play
play = Play().load(play_source, variable_manager=variable_manager, loader=loader)

# 实例化任队列管理器
tqm = None
try:
    tqm = TaskQueueManager(
              inventory=inventory,
              variable_manager=variable_manager,
              loader=loader,
              options=options,
              passwords=passwords,
          )
    result = tqm.run(play)
finally:
    if tqm is not None:
        tqm.cleanup()  # 清理任务
    shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)  # 删除临时目录


ansible-cmdb
1、安装
# pip3 install ansible-cmdb
2、利用ansible收集主机信息
[root@room8pc16 myansi]# mkdir /tmp/ansi-cmdb
[root@room8pc16 myansi]# ansible all -m setup --tree /tmp/ansi-cmdb/out/
3、利用ansible-cmdb生成html页面
[root@room8pc16 myansi]# ansible-cmdb /tmp/ansi-cmdb/out/ > /tmp/ansi-cmdb/hosts_info.html
[root@room8pc16 myansi]# firefox /tmp/ansi-cmdb/hosts_info.html


ansible模块开发（了解）
1、创建自定义模块目录
[root@room8pc16 myansi]# mkdir library
2、在模块目录下创建模块文件
[root@room8pc16 myansi]# vim library/local_copy.py
3、设置模块目录的环境变量
[root@room8pc16 myansi]# export ANSIBLE_LIBRARY=/var/ftp/nsd2018/nsd1804/python/day14/myansi/library
4、执行ad-hoc临时命令进行测试
[root@room8pc16 myansi]# ansible node2.tedu.cn -m local_copy -a "yuan=/etc/hosts mudi=/tmp/zhuji2"












