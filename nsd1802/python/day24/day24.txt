python技能描述
1、熟练掌握python语言，能够编写日常工作中所需要的运维工具
2、熟悉django web框架，能够进行基本的weg开发
3、熟悉pymysql、sqlalchemy、urllib、requests等模块
4、熟悉zabbix api，通过python实现zabbix编程

项目一：达内教学自动化管理系统
描述：达内每间教室都有50台以上的学生机，经常需要对这些机器进行管理、发送文件等。
为了方便管理，开发了一套自动化管理系统。
管理系统功能描述：
1、收集教室中所有主机的IP地址
2、收集教室中所有主机的MAC地址
3、通过MAC地址，可以实现主机自动开机
4、可以向所有主机集中发送文件
5、可以在所有主机上并行执行相同的命令

项目二：持续集成/持续交付项目
描述：程序员编写好程序后，需要由运维工程师部署到服务器上。软件不断的发布新版本，运维
工程师相应地需要重复相同的部署工作。为了简化流程、实现自动化管理，通过一系列工具和程
序实现CI/CD。
功能描述：
1、搭建gitlab，实现代码版本管理
2、搭建jenkins，实现代码的下载、构建
3、在应用服务器上，编写脚本，实现软件的自动下载、部署
4、可以实现新版本的上线、老版本的回滚


创建mysite项目
# django-admin startproject mysite
# cd mysite/
# vim mysite/settings.py
ALLOWED_HOSTS = '*'
LANGUAGE_CODE = 'zh-Hans'
TIME_ZONE = 'Asia/Shanghai'

创建hosts应用
# python manage.py startapp hosts
# vim mysite/settings.py
INSTALLED_APPS = [
    ... ...
    'hosts',
]

创建模型
from django.db import models

class Host(models.Model):
    hostname = models.CharField(max_length=50)
    ip_addr = models.CharField(max_length=15)
    group = models.CharField(max_length=50)

    def __str__(self):
        return self.hostname

生成数据库
# python manage.py makemigrations
# python manage.py migrate

创建管理员用户
# python manage.py createsuperuser

将模型注册到后管理页面
# vim hosts/admin.py
from django.contrib import admin
from .models import Host

admin.site.register(Host)

启动服务器
(django_env) [root@room8pc16 mysite]# python manage.py runserver 0:80

访问http://127.0.0.1/admin

设计url
http://127.0.0.1/hosts/ -> 交给hosts应用处理
# vim mysite/urls.py
from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^hosts/', include('hosts.urls')),
]
# vim hosts/urls.py
from django.conf.urls import url
from . import views

urlpatterns = [
    url(r'^add/$', views.add, name='add'),
    url(r'^addhost/$', views.addhost, name='addhost'),
]

编写视图函数
from django.shortcuts import render, redirect
from .models import Host

def add(request):
    pass

def addhost(request):
    hostname = request.POST.get('hostname')
    ip = request.POST.get('ipaddr')
    group = request.POST.get('group')
    host = Host(hostname=hostname, ip_addr=ip, group=group)
    host.save()
    return redirect('add')

编写脚本，注册主机到数据库
关闭csrf验证
# vim mysite/settings.py
注释掉MIDDLEWARE中的'django.middleware.csrf.CsrfViewMiddleware',
# vim addhost.py
import requests

url = 'http://127.0.0.1/hosts/addhost/'
hosts = [
    {'hostname': 'node2.tedu.cn','ipaddr': '192.168.4.2','group': 'webservers',},
    {'hostname': 'node3.tedu.cn','ipaddr': '192.168.4.3','group': 'webservers',},
    {'hostname': 'node4.tedu.cn','ipaddr': '192.168.4.4','group': 'webservers',},
    {'hostname': 'node5.tedu.cn','ipaddr': '192.168.4.5','group': 'dbservers',},
    {'hostname': 'node6.tedu.cn','ipaddr': '192.168.4.6','group': 'dbservers',},
]
for data in hosts:
    requests.post(url, data=data)


查询数据库
# python manage.py shell
>>> from hosts.models import Host
>>> Host.objects.all()  # 返回所有实例的查询集
>>> h = Host.objects.get(hostname='node1.tedu.cn')  # 返回满足条件的实例
>>> h.hostname
>>> Host.objects.all()[:3]  # 返回前三个实例的查询集
>>> Host.objects.order_by('group')  # 按Group排序
>>> Host.objects.filter(group='dbservers')
>>> Host.objects.filter(group__exact='dbservers')  # 严格匹配
>>> Host.objects.filter(group__iexact='DBservers')  # 不区分大小写
>>> Host.objects.filter(group__contains='server')  # 包含字符串
>>> Host.objects.filter(group__icontains='server')  # 不区分大小写
>>> Host.objects.filter(hostname__regex='node[0-3]')  # 正则匹配
>>> Host.objects.filter(hostname__iregex='node[0-3]')  # 正则匹配


新建记录：不会重复创建
Host.objects.get_or_create(hostname=hostname, ip_addr=ip, group=group)

更新：
（1）使用实例属性重新赋值
>>> h1 = Host.objects.get(id=7)
>>> h1.hostname = 'node7.tedu.cn'
>>> h1.save()
（2）使用查询集的update方法
>>> h8 = Host.objects.filter(id=8)
>>> h8.update(group='mailservers')

删除
>>> h8 = Host.objects.get(id=8)
>>> h8.delete()



















