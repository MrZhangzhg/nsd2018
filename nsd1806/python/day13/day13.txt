解释型语言：php/python/shell
编译型语言：C/java

# vim hello.c
#include <stdio.h>

int main(void) {
    printf("Hello World!\n");
    return 0;
}
# 将C语言源码编译成二进制执行文件
[root@room8pc16 day13]# gcc -o hello hello.c
[root@room8pc16 day13]# ./hello


jenkins
1、准备虚拟机
node3: eth0 -> 192.168.4.3
       eth1 -> 连接方式使用缺省的NAT
如果NAT选不了：打开控制台virt-manager -> 编辑 -> 连接详情 -> 虚拟网络
找到default网络，点击下面的开始按钮将其激活
2、配置IP地址
# nmtui  -> 如果没有eth1，可以选择添加->Ethernet->名字写eth1，ip地址自动获得
3、删除虚拟机中的网桥
[root@node3 ~]# ifconfig virbr0 down
[root@node3 ~]# brctl delbr virbr0
4、激活网卡
[root@node3 ~]# ifdown eth0; ifup eth0
[root@node3 ~]# ifdown eth1; ifup eth1
5、将jenkins软件拷贝到虚拟机中
6、虚拟机配置好yum
7、安装jenkins
[root@node3 ~]# rpm -ihv jenkins-2.121.1-1.1.noarch.rpm
[root@node3 ~]# systemctl start jenkins
[root@node3 ~]# systemctl enable jenkins
8、配置jenkins
访问http://192.168.4.3:8080
插件安装，“选择插件来安装” -> 只选git和git parameter即可


模拟程序员写程序，在本地通过git管理
[root@room8pc16 day12]# git init /tmp/devops
[root@room8pc16 day12]# cd /tmp/devops/
[root@room8pc16 devops]# vim index.html
<h1>web server 1.0</h1>
[root@room8pc16 devops]# git add .   # 加到暂存区
[root@room8pc16 devops]# git commit -m "web project 1.0"  # 加到版本库
[root@room8pc16 devops]# git tag 1.0   # 打标记，1.0版本
[root@room8pc16 devops]# vim index.html
<h1>web server 1.0</h1>
<h2 style="color: green">web server 2.0</h2>
[root@room8pc16 devops]# git add .
[root@room8pc16 devops]# git commit -m "web project 2.0"
[root@room8pc16 devops]# git tag 2.0
[root@room8pc16 devops]# git log   # 查看
[root@room8pc16 devops]# git tag
程序员将本地代码推送到gitlab服务器
[root@room8pc16 ~]# cd /tmp/devops/
[root@room8pc16 devops]# git remote rename origin old-origin
[root@room8pc16 devops]# git remote add origin http://192.168.4.1/nsd1806/devops.git
[root@room8pc16 devops]# git push -u origin --all
[root@room8pc16 devops]# git push -u origin --tags


gitlab中重要的概念
群组group：可以为一个团队创建一个群组
项目project：一个团队可以开发多个项目
成员member：为团队成员创建的账号

创建名为nsd1806的group，再从组中创建名为devops的项目
创建用户，将用户加入到项目，为其指定角色为主程序员


配置jenkins访问gitlab
实现以下目标：
1、jenkins访问gitlab，将代码下载
2、下载代码时，可以选择版本(tag)
3、下载的代码默认保存在/var/lib/jenkins/workspace目录下，需要在它下面创建子目录
4、下载的代码需要打tar包，保存到web服务器网站目录下，以供下载
5、计算tar包的md5值，保存到文件中，以便下载时校验
6、将软件最新版本写到live_version
7、将前一个版本写last_version文件中
步骤
1、在jenkins服务器上安装git和apache
[root@node3 ~]# yum install -y git httpd
2、启动httpd
3、创建/var/www/html/deploy用于保存live_verion和last_version
4、创建/var/www/html/deploy/packages/用于保存tar包和md5值文件
[root@node3 ~]# mkdir -pv /var/www/html/deploy/packages
5、修改新建目录的属主属组
[root@node3 ~]# chown -R jenkins.jenkins /var/www/html/deploy
6、在jenkins中创建一个“自由风格”的项目
参数化构建过程 -> git parameter

shell脚本内容如下：
deploy_dir=/var/www/html/deploy
cp -r web_pro_$mytag $deploy_dir/packages/
rm -rf $deploy_dir/packages/web_pro_$mytag/.git
cd $deploy_dir/packages/
tar czf web_pro_$mytag.tar.gz web_pro_$mytag
md5sum web_pro_$mytag.tar.gz | awk '{print $1}' > web_pro_$mytag.tar.gz.md5
rm -rf web_pro_$mytag
cd $deploy_dir
[ -f live_version ] && cat live_version > last_version
echo $mytag > live_version


在应用服务器上编写python工具，实现软件自动部署
1、检查是否有新版本
2、如果有新版本就下载新版本
3、校验下载的程序包是否损坏
4、如果没有损坏，部署
5、更新本地live_version

将物理主机作为应用服务器。下载的软件及live_version存到/var/www/download/中，
下载的软件解压到/var/www/deploy中。部署时，创建链接文件指向/var/www/html/nsd1806
# mkdir /var/www/{download,deploy}





[root@room8pc16 day13]# pip install wget
>>> import wget
>>> wget.download('http://192.168.4.3/deploy/packages/web_pro_1.0.tar.gz', '/tmp/web_pro_1.0.tar.gz')







