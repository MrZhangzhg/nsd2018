>>> import re
>>> re.match('f..', 'food')   # 匹配到，返回匹配对象
>>> print(re.match('f..', 'seafood'))   # 没有匹配到，返回None
>>> re.search('f..', 'food')
>>> re.search('f..', 'seafood')
>>> m.group()    # 返回匹配内容
>>> re.findall('f..', 'seafood is food')
>>> for m in re.finditer('f..', 'seafood is food'):
...   print(m.group())
>>> re.split('\.|-', 'hello-world.tar.gz')  # 以点或-作为分隔符进行切割
>>> print(re.sub('X', 'zzg', 'Hi X\nHello X'))   # 查找替换
在匹配量很大的时候，先将模式进行编译，可以提升效率
>>> patt = re.compile('f..')
>>> m = patt.search('seafood')
>>> m.group()
>>> patt.findall('seafood is food')


>>> from collections import Counter
>>> c = Counter()
>>> c.update('192.168.1.1')
>>> c.update(['192.168.1.1'])
>>> c.update(['192.168.1.1'])
>>> c.update(['192.168.1.1'])
>>> c

>>> m = re.search('.+(\d+)', 'My phone number is: 15011223356')
>>> m.group()
>>> m.group(1)    # m.group(1)返回(\d+)匹配到的内容，是6
.+是贪婪匹配，.+会匹配到尽可能多的字符，让\d+尽可能匹配得少
?可以取消贪婪匹配的行为，让\d+匹配更多的内容
>>> m = re.search('.+?(\d+)', 'My phone number is: 15011223356')
>>> m.group(1)
'15011223356'
















