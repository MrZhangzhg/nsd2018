一、项目：通过web批量管理服务器
1、管理远程服务器，通过ansible实现
2、远程服务器写到数据库中
3、ansible使用动态主机清单
4、在web页中可以查看所有的远程服务器状态
5、通过web创建主机和主机组
6、通过web添加使用ansible模块
7、通过web指定在哪些主机/主机组上执行相关的操作


二、前期准备
1、激活虚拟环境
[root@room8pc16 ansible_project]# source /opt/djenv/bin/activate
2、安装必须的软件包
# pip install ansible
# pip install pymysql sqlalchemy
# pip install wordcloud matplotlib


三、管理项目
1、创建项目
# django-admin startproject myansible
2、创建应用
# cd myansible/
# python manage.py startapp webansi
3、基础配置
# myansible/settings.py
ALLOWED_HOSTS = '*'
INSTALLED_APPS = [
    ... ...
    'webansi',
]
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False

四、规划URL
http://server/  # 显示所有任务的超链接
http://server/webansi/   # 显示远程服务器主机信息
http://server/webansi/addhosts/   # 显示/添加主机(组)
http://server/webansi/addmodules/   # 显示/添加模块、参数
http://server/webansi/tasks       # 执行任务


五、授权，以http://server/webansi/开头的网址交给webansi应用处理
# myansible/urls.py
from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^webansi/', include('webansi.urls')),
]
# webansi/urls.py
from django.conf.urls import url
urlpatterns = [
]

六、设计模型
1、创建模型
# webansi/models.py
from django.db import models

class HostGroup(models.Model):
    groupname = models.CharField(max_length=50, unique=True)

    def __str__(self):
        return self.groupname

class Host(models.Model):
    hostname = models.CharField(max_length=50, unique=True)
    ipaddr = models.CharField(max_length=15)
    group = models.ForeignKey(HostGroup, on_delete=models.CASCADE)

    def __str__(self):
        return "<%s->%s>" % (self.hostname, self.group)

class AnsiModule(models.Model):
    module_name = models.CharField(max_length=30, unique=True)

    def __str__(self):
        return self.module_name

class ModuleArg(models.Model):
    arg_text = models.CharField(max_length=100)
    mod = models.ForeignKey(AnsiModule, on_delete=models.CASCADE)

    def __str__(self):
        return "<%s->%s>" % (self.arg_text, self.mod)
2、生成数据表
# python manage.py makemigrations
# python manage.py migrate
# sqlite3 db.sqlite3
sqlite> .tables
sqlite> .schema webansi_host
3、创建管理员用户
# python manage.py createsuperuser
4、将模型注册到后管理界面
# webansi/admin.py
from django.contrib import admin
from .models import HostGroup, Host, AnsiModule, ModuleArg

for item in [ HostGroup, Host, AnsiModule, ModuleArg]:
    admin.site.register(item)
5、启动测试服务器，登陆后台查看

七、制作首页
1、编写url
# myansible/urls.py
from django.conf.urls import url, include
from django.contrib import admin
from . import views

urlpatterns = [
    url(r'^$', views.index, name='index'),
    url(r'^admin/', admin.site.urls),
    url(r'^webansi/', include('webansi.urls')),
]
2、创建views.py
# myansible/views.py
from django.shortcuts import render

def index(request):
    return render(request, 'index.html')
3、创建模板
# webansi/templates/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>首页</title>
</head>
<body>
这是首页
</body>
</html>

八、引入bootstrap
1、将day17的static复制到webansi目录下
# cp -r ../../day17/static/ webansi/
2、修改index.html





实现模板继承















